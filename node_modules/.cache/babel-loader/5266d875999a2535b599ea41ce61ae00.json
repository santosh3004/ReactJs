{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\santosh\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport { useState, useEffect } from 'react';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchTask = async () => {\n    const res = await fetch('http://localhost:5000/tasks/${id}');\n    const data = await res.json();\n    return data;\n  }; //Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id=Math.floor(Math.random()*10000)+1\n    // const newTask={id,...task}\n    // setTasks([...tasks,newTask])\n  }; //Delete task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://loalhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleRem = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch('http://localhost:5000/tasks/${id}', {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    cons;\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAddBtn: () => setShowAddTask(!showAddTask),\n      showADD: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleRem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }, this) : 'No Task ASsigned']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"qkMnXyEh5aZ//+FDh/FdrZM7KGU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Projects/React/santosh/src/App.js"],"names":["Header","Tasks","useState","useEffect","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","addTask","task","method","headers","body","JSON","stringify","deleteTask","id","filter","toggleRem","taskToToggle","updTask","reminder","cons","map","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks';\nimport { useState,useEffect} from 'react'\nimport AddTask from './components/AddTask';\n\n\nfunction App() {\n  const [showAddTask,setShowAddTask]=useState(false)\n  const [tasks, setTasks] = useState([])\n  useEffect(()=>{\n    const getTasks=async()=>{\n      const tasksFromServer=await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n    getTasks()\n  },[])\n\n  const fetchTasks=async()=>{\n    const res=await fetch('http://localhost:5000/tasks')\n    const data=await res.json()\n    return data\n  }\n\n  const fetchTask=async()=>{\n    const res=await fetch('http://localhost:5000/tasks/${id}')\n    const data=await res.json()\n    return data\n  }\n\n\n  //Add Task\n  const addTask=async(task)=>{\n\n    const res =await fetch('http://localhost:5000/tasks',{\n      method:'POST',headers:{\n        'Content-type':'application/json'\n      },\n      body:JSON.stringify(task)\n    })\n    const data=await res.json()\n    setTasks([...tasks,data])\n    // const id=Math.floor(Math.random()*10000)+1\n    // const newTask={id,...task}\n    // setTasks([...tasks,newTask])\n  }\n\n\n\n  //Delete task\n  const deleteTask = async (id) => {\nawait fetch(`http://loalhost:5000/tasks/${id}`,{method:'DELETE'})\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n\n  //Toggle Reminder\n  const toggleRem = async (id) => {\n    const taskToToggle=await fetchTask(id)\n    const updTask={...taskToToggle,reminder:!taskToToggle.reminder}\n\n    const res =await fetch('http://localhost:5000/tasks/${id}',{\n      method:'PUT',\n      headers:{\n        'Content-type':'application/json'\n      },\n      body:JSON.stringify(updTask)\n    })\n    cons\n\n    setTasks(tasks.map((task) => task.id === id ? { ...task,reminder:!task.reminder} : task))\n}\nreturn (\n  <div className=\"container\">\n    <Header onAddBtn={()=>setShowAddTask(!showAddTask)} showADD={showAddTask}/>\n    {showAddTask&&<AddTask onAdd={addTask}/>}\n    {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleRem} /> : 'No Task ASsigned'}\n  </div>\n);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}